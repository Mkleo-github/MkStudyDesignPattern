package com.mkleo.S16解释器模式;

/**
 * @说明:
 * @作者: Wang HengJin
 * @日期: 2018/5/17 15:15 星期四
 */
public class Report {



    /*
     使用场景

     一些重复发生的事情包含固定的一系列操作类型，
     比较适合用解释器模式来实现。比如加减乘除四则运算，
     但是公式每次都不同，比如可配置，有时是a + b - c x d，有时是a x b + c - d，等等等等个，
     公式千变万化，但是都是由加减乘除四个非终结符来连接的，这时我们就可以使用解释器模式。

     */

    /*
    优缺点

    解释器是一个简单的语法分析工具，它最显著的优点就是扩展性，
    修改语法规则只需要修改相应的非终结符就可以了，若扩展语法，
    只需要增加非终结符类就可以了。比如我们现在需要修改Plus的含义，
    那么只需要修改Plus类即可，如果要增加乘法操作，那么也只需要增加一个Multiple类就行。
    但是，解释器模式会引起类的膨胀，每个语法都需要产生一个非终结符表达式，
    语法规则比较复杂时，就可能产生大量的类文件，
    为维护带来非常多的麻烦。同时，从例子我们也可以看到，
    整个表达式的运算过程采用了递归调用方法，每个非终结符表达式只关心与自己相关的表达式，
    每个表达式需要知道最终的结果，必须通过递归方式，无论是面向对象的语言还是面向过程的语言，
    递归都是一个不推荐的方式。由于使用了大量的循环和递归，
    效率是一个不容忽视的问题。特别是用于解释一个解析复杂、冗长的语法时，效率是难以忍受的。

     */
}
